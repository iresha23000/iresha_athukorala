import google.generativeai as genai
import os
import json

def configure_api():
    """Configure the Google Generative AI client with your API key from environment variables."""
    api_key = os.getenv("GEMINI_API_KEY")  # Use `os.getenv` for cleaner access
    if not api_key:
        raise ValueError("API key not found. Please set the GEMINI_API_KEY environment variable.")
    genai.configure(api_key=api_key)
    print("API configured successfully.")

def generate_dictionary_entry(word):
    """Generate a dictionary entry for the given word using a Generative AI model."""
    if not word:
        raise ValueError("Word cannot be empty.")

    print(f"Generating dictionary entry for the word: '{word}'")

    # Define the prompt for the model
    prompt = (
        f"Provide a dictionary entry for the word '{word}', including the definition, "
        "synonyms, antonyms, examples of use, and a usage sentence in JSON format."
    )

    try:
        # Initialize the model
        model = genai.GenerativeModel(model_name="gemini-1.5-flash")

        # Generate content using the model
        response = model.generate_content([prompt])

        # Parse the response and output it as JSON
        response_text = response.text.strip()

        try:
            # Attempt to parse the response as JSON
            dictionary_entry = json.loads(response_text)
            print(json.dumps(dictionary_entry, indent=4))  # Print formatted JSON

        except json.JSONDecodeError:
            # If the response isn't valid JSON, print the raw response
            print("Received response is not valid JSON:")
            print(response_text)

    except Exception as e:
        print(f"Error generating dictionary entry: {e}")

def main():
    try:
        configure_api()

        # Get the word from the user
        word = input("Enter a word: ").strip()

        if word:
            # Generate and print the dictionary entry
            generate_dictionary_entry(word)
        else:
            print("No word entered. Exiting.")

    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()
