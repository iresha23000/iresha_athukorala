import google.generativeai as genai
from markdown_pdf import MarkdownPdf, Section
import os

def configure_api():
    """Configure the Google Generative AI client using the API key from environment variables."""
    api_key = os.getenv("GEMINI_API_KEY")
    if not api_key:
        raise ValueError("API key not found. Please set the GEMINI_API_KEY environment variable.")
    genai.configure(api_key=api_key)
    print("API successfully configured.")

def generate_scientific_article(topic):
    """Generate a detailed scientific article on the specified topic using Google Generative AI."""
    if not topic:
        raise ValueError("Topic cannot be empty.")
    
    print(f"Generating scientific article for the topic: '{topic}'")
    
    prompt = (
        f"Write a detailed scientific article about {topic}, including tables and "
        "at least 7 APA style references."
    )

    try:
        model = genai.GenerativeModel("gemini-1.5-flash")
        response = model.generate_content(prompt)
        return response.text.strip()  # Return cleaned up response text

    except Exception as e:
        print(f"Error generating scientific article: {e}")
        return None

def create_pdf(article_content):
    """Convert the generated article content into a formatted PDF document."""
    if not article_content:
        raise ValueError("Article content is empty. Cannot create PDF.")
    
    print("Creating PDF document...")
    
    # Create the PDF with Table of Contents (TOC) level 1
    pdf = MarkdownPdf(toc_level=1)
    
    # Add the article content to the PDF with a simple table style
    section = Section(article_content, paper_size="A4")
    pdf.add_section(section, user_css="table, td, th {border: 1px solid black;}")

    # Set the metadata for the PDF
    pdf.meta["title"] = "Scientific Article"
    pdf.meta["author"] = "Generated by Google Gemini"

    # Save the PDF to the current working directory
    output_file = "scientific_article.pdf"
    pdf.save(output_file)
    print(f"PDF saved successfully as '{output_file}'")

def main():
    try:
        # Configure the API
        configure_api()

        # Get the topic for the scientific article from the user
        topic = input("Enter the topic for the scientific article: ").strip()
        
        # Generate the scientific article
        article_content = generate_scientific_article(topic)

        if article_content:
            # Create and save the PDF from the generated content
            create_pdf(article_content)
        else:
            print("Failed to generate the article. Please try again.")

    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()
